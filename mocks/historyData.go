// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	history "e-wallet/features/history"

	mock "github.com/stretchr/testify/mock"
)

// HistoryData is an autogenerated mock type for the DataInterface type
type HistoryData struct {
	mock.Mock
}

// CountHistory provides a mock function with given fields: idUser
func (_m *HistoryData) CountHistory(idUser uint) (int, error) {
	ret := _m.Called(idUser)

	if len(ret) == 0 {
		panic("no return value specified for CountHistory")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (int, error)); ok {
		return rf(idUser)
	}
	if rf, ok := ret.Get(0).(func(uint) int); ok {
		r0 = rf(idUser)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(idUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertHistory provides a mock function with given fields: input
func (_m *HistoryData) InsertHistory(input history.Core) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for InsertHistory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(history.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAllHistory provides a mock function with given fields: idUser, offset, limit
func (_m *HistoryData) SelectAllHistory(idUser uint, offset int, limit int) ([]history.Core, error) {
	ret := _m.Called(idUser, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for SelectAllHistory")
	}

	var r0 []history.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]history.Core, error)); ok {
		return rf(idUser, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []history.Core); ok {
		r0 = rf(idUser, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]history.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(idUser, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHistoryTopUp provides a mock function with given fields: input
func (_m *HistoryData) UpdateHistoryTopUp(input history.Core) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHistoryTopUp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(history.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHistoryData creates a new instance of HistoryData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHistoryData(t interface {
	mock.TestingT
	Cleanup(func())
}) *HistoryData {
	mock := &HistoryData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
