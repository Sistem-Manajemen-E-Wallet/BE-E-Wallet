// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	topups "e-wallet/features/topups"

	mock "github.com/stretchr/testify/mock"
)

// TopUpsData is an autogenerated mock type for the DataInterface type
type TopUpsData struct {
	mock.Mock
}

// Insert provides a mock function with given fields: input
func (_m *TopUpsData) Insert(input topups.Core) (topups.Core, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 topups.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(topups.Core) (topups.Core, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(topups.Core) topups.Core); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(topups.Core)
	}

	if rf, ok := ret.Get(1).(func(topups.Core) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectById provides a mock function with given fields: id
func (_m *TopUpsData) SelectById(id int) (topups.Core, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SelectById")
	}

	var r0 topups.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (topups.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) topups.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(topups.Core)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByOrderID provides a mock function with given fields: id
func (_m *TopUpsData) SelectByOrderID(id string) (topups.Core, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SelectByOrderID")
	}

	var r0 topups.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (topups.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) topups.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(topups.Core)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByUserID provides a mock function with given fields: id
func (_m *TopUpsData) SelectByUserID(id int) ([]topups.Core, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SelectByUserID")
	}

	var r0 []topups.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]topups.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []topups.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]topups.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, input
func (_m *TopUpsData) Update(id int, input topups.Core) error {
	ret := _m.Called(id, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, topups.Core) error); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTopUpsData creates a new instance of TopUpsData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTopUpsData(t interface {
	mock.TestingT
	Cleanup(func())
}) *TopUpsData {
	mock := &TopUpsData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
