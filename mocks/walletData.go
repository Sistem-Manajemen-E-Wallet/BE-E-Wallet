// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	wallet "e-wallet/features/wallet"

	mock "github.com/stretchr/testify/mock"
)

// WalletData is an autogenerated mock type for the DataInterface type
type WalletData struct {
	mock.Mock
}

// CreateWallet provides a mock function with given fields: id
func (_m *WalletData) CreateWallet(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for CreateWallet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWalletById provides a mock function with given fields: id
func (_m *WalletData) GetWalletById(id uint) (wallet.Core, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetWalletById")
	}

	var r0 wallet.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (wallet.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) wallet.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(wallet.Core)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletByUserId provides a mock function with given fields: id
func (_m *WalletData) GetWalletByUserId(id uint) (wallet.Core, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetWalletByUserId")
	}

	var r0 wallet.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (wallet.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) wallet.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(wallet.Core)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBalanceByTopup provides a mock function with given fields: input
func (_m *WalletData) UpdateBalanceByTopup(input wallet.Core) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalanceByTopup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(wallet.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBalanceMinus provides a mock function with given fields: id, amount
func (_m *WalletData) UpdateBalanceMinus(id uint, amount int) error {
	ret := _m.Called(id, amount)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalanceMinus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, int) error); ok {
		r0 = rf(id, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBalancePlus provides a mock function with given fields: id, amount
func (_m *WalletData) UpdateBalancePlus(id uint, amount int) error {
	ret := _m.Called(id, amount)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalancePlus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, int) error); ok {
		r0 = rf(id, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWalletData creates a new instance of WalletData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletData(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletData {
	mock := &WalletData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
